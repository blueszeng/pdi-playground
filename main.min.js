
const Electron = require("electron");
// Type definitions for Node.js v6.x
// Project: http://nodejs.org/
// Definitions by: Microsoft TypeScript <http://typescriptlang.org>, DefinitelyTyped <https://github.com/DefinitelyTyped/DefinitelyTyped>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// Type definitions for Electron v0.37.8
// Project: http://electron.atom.io/
// Definitions by: jedmao <https://github.com/jedmao/>, rhysd <https://rhysd.github.io>, Milan Burda <https://github.com/miniak/>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
/// <reference path="../node/main.ts" />

/// <reference path="../references/node/main.ts" />
/// <reference path="../references/electron/main.ts" />
var BrowserWindow = Electron.BrowserWindow;
var components;
(function (components) {
    var Window = (function () {
        function Window() {
            var self = this;
            this.own = new BrowserWindow({ width: 1200, height: 800 });
            this.own.loadURL("file://" + __dirname + "/app/index.html");
            this.own.webContents.openDevTools();
            this.own.on("closed", function () {
                self.own = null;
            });
        }
        Window.prototype.maximize = function () {
            this.own.maximize();
        };
        return Window;
    }());
    components.Window = Window;
})(components || (components = {}));

/// <reference path="../references/electron/main.ts"/>
var components;
(function (components) {
    var App = (function () {
        function App() {
            this.own = Electron.app;
            this.windows = new Array();
            this.bindEvents();
        }
        App.prototype.bindEvents = function () {
            var self = this;
            this.own.on("ready", function () {
                var window = new components.Window();
                window.maximize();
                self.windows.push(window);
            });
            this.own.on("window-all-closed", function () {
                if (process.platform !== "darwin") {
                    self.own.quit();
                }
            });
            this.own.on("activate", function () {
                // On OS X it"s common to re-create a window in the app when the
                // dock icon is clicked and there are no other windows open.
                if (self.windows.length === 0) {
                    self.windows.push(new components.Window());
                }
            });
        };
        return App;
    }());
    components.App = App;
})(components || (components = {}));

/// <reference path="references/electron/main.ts"/>
/// <reference path="components/window.ts" />
/// <reference path="components/app.ts" />
var App = components.App;
var Bootstrap = (function () {
    function Bootstrap() {
        this.mainApp = new App();
    }
    return Bootstrap;
}());
new Bootstrap();
