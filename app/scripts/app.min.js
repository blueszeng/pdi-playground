var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
"use strict";
var ColorType;
(function (ColorType) {
    ColorType[ColorType["RED"] = 0] = "RED";
    ColorType[ColorType["GREEN"] = 1] = "GREEN";
    ColorType[ColorType["BLUE"] = 2] = "BLUE";
    ColorType[ColorType["ALPHA"] = 3] = "ALPHA";
})(ColorType || (ColorType = {}));
/// <reference path="colorType.ts" />
"use strict";
var Color = (function () {
    function Color(colorType, value) {
        this.colorType = colorType;
        this.value = value;
    }
    return Color;
}());
/// <reference path="color.ts" />
"use strict";
var ColorInfo = (function () {
    function ColorInfo(colorType, imageData) {
        this.pixels = new Array();
        this.colorType = colorType;
        this.defineValues(imageData);
    }
    ColorInfo.prototype.defineValues = function (imageData) {
        this.getColorPixels(imageData);
        this.defineHistogram();
        this.defineAverage();
        this.defineMedian();
        this.defineMode();
        this.defineVariance();
    };
    ColorInfo.prototype.getColorPixels = function (imageData) {
        for (var i = 0; i < imageData.data.length; i += 4) {
            this.pixels.push(new Color(this.colorType, imageData.data[i + this.colorType]));
        }
    };
    ColorInfo.prototype.defineHistogram = function () {
        var histogram = new Array();
        for (var i = 0; i <= 255; i++) {
            histogram[i] = 0;
        }
        this.pixels.forEach(function (color) {
            histogram[color.value] += 1;
        });
        this.histogram = histogram;
    };
    ColorInfo.prototype.defineAverage = function () {
        var somaPixels = 0;
        this.pixels.forEach(function (color, i) {
            somaPixels += color.value;
        });
        this.average = somaPixels / this.pixels.length;
    };
    ColorInfo.prototype.defineMedian = function () {
        var simplePixels = new Array();
        var pixel;
        this.pixels.forEach(function (color, i) {
            simplePixels[i] = color.value;
        });
        simplePixels.sort();
        this.median = simplePixels[Math.floor(simplePixels.length / 2)];
    };
    ColorInfo.prototype.defineMode = function () {
        this.mode = Math.max.apply(Math, this.histogram);
    };
    ColorInfo.prototype.defineVariance = function () {
        var sumVariance = 0;
        var self = this;
        this.pixels.forEach(function (color) {
            sumVariance += Math.pow((color.value - self.average), 2);
        });
        this.variance = sumVariance / this.pixels.length;
    };
    return ColorInfo;
}());
/// <reference path="colorInfo.ts" />
"use strict";
var Picture = (function () {
    function Picture(src, canvas) {
        this.canvas = canvas;
        this.context = this.canvas.getContext("2d");
        this.image = new Image();
        this.image.src = src;
        this.imageMatrix = new Array();
        this.bindEvents();
    }
    Picture.prototype.getHtmlImage = function () {
        return this.image;
    };
    Picture.prototype.bindEvents = function () {
        var self = this;
        $(this.image).on("load", function () {
            self.context.drawImage(self.image, 0, 0);
            self.imageData = self.context.getImageData(0, 0, self.canvas.width, self.canvas.height);
            self.context.clearRect(0, 0, self.canvas.width, self.canvas.height);
            self.context.putImageData(self.imageData, 0, 0);
            self.width = self.image.width;
            self.height = self.image.height;
            self.defineValues();
        });
    };
    Picture.prototype.defineValues = function () {
        this.defineColorsInfo();
        this.definePictureMatrix();
    };
    Picture.prototype.defineColorsInfo = function () {
        this.red = new ColorInfo(ColorType.RED, this.imageData);
        this.blue = new ColorInfo(ColorType.BLUE, this.imageData);
        this.green = new ColorInfo(ColorType.GREEN, this.imageData);
        this.alpha = new ColorInfo(ColorType.ALPHA, this.imageData);
    };
    Picture.prototype.definePictureMatrix = function () {
        var y = 0;
        var x = 0;
        for (var i = 0, j = this.imageData.data.length; i < j; i += 4) {
            if (!this.imageMatrix[y]) {
                this.imageMatrix[y] = new Array();
            }
            this.imageMatrix[y][x] = [
                this.imageData.data[i],
                this.imageData.data[i + 1],
                this.imageData.data[i + 2],
                this.imageData.data[i + 3]
            ];
            x++;
            if (x > this.imageData.width - 1) {
                y++;
                x = 0;
            }
        }
    };
    return Picture;
}());
"use strict";
var View = (function () {
    function View(fragment) {
        if (fragment === void 0) { fragment = $("body"); }
        this.scope = new Object();
        this.fragment = fragment;
    }
    View.prototype.render = function () {
        this.print(this.scope);
    };
    View.prototype.print = function (data, parents) {
        for (var d in data) {
            if (typeof (data[d]) === "object") {
                if (parents === undefined) {
                    this.print(data[d], "" + d);
                }
                else {
                    this.print(data[d], parents + "." + d);
                }
            }
            else {
                var selector = "{{" + parents + "." + d + "}}";
                if (this.fragment.html().contains("<!--START" + selector + "START-->") && this.fragment.html().contains("<!--END" + selector + "END-->")) {
                    var expression = "(?<=<!--START" + selector + "START-->)(.*)(?=<!--END" + selector + "END-->)";
                    this.fragment.html(this.fragment
                        .html()
                        .replace(expression, data[d]));
                }
                else {
                    this.fragment.html(this.fragment
                        .html()
                        .replace(selector, "<!--START" + selector + "START-->" + data[d] + "<!--END" + selector + "END-->"));
                }
            }
        }
    };
    return View;
}());
/// <reference path="../models/picture.ts" />
/// <reference path="view.ts" />
"use strict";
var StatisticsView = (function (_super) {
    __extends(StatisticsView, _super);
    function StatisticsView() {
        _super.call(this, $(".statistics"));
        this.$canvas = $("#PDI_CANVAS");
        this.image = new Picture("media/img/Lenna.png", this.$canvas[0]);
        this.bindEvents();
    }
    StatisticsView.prototype.bindEvents = function () {
        var self = this;
        $(this.image.getHtmlImage()).on("load", function () {
            self.defineStatistics();
            self.openChart();
            self.render();
            console.log(self);
        });
    };
    StatisticsView.prototype.defineStatistics = function () {
        this.scope.statistics = {
            red: {
                average: this.image.red.average,
                median: this.image.red.median,
                mode: this.image.red.mode,
                variance: this.image.red.variance
            },
            green: {
                average: this.image.green.average,
                median: this.image.green.median,
                mode: this.image.green.mode,
                variance: this.image.green.variance
            },
            blue: {
                average: this.image.blue.average,
                median: this.image.blue.median,
                mode: this.image.blue.mode,
                variance: this.image.blue.variance
            },
            alpha: {
                average: this.image.alpha.average,
                median: this.image.alpha.median,
                mode: this.image.alpha.mode,
                variance: this.image.alpha.variance
            }
        };
    };
    StatisticsView.prototype.openChart = function () {
        console.log(this.image.red.histogram);
        new Chartist.Line(".chart-red-histogram", {
            series: [this.image.red.histogram]
        }, {
            showArea: true,
            showLine: false,
            showPoint: false,
            fullWidth: true,
            axisX: {
                showLabel: false,
                showGrid: false
            }
        });
    };
    return StatisticsView;
}(View));
/// <reference path="views/statisticsView.ts" />
var view = new StatisticsView();
view.render();
"use strict";
var Controller = (function () {
    function Controller() {
    }
    return Controller;
}());
"use strict";
var Service = (function () {
    function Service() {
    }
    return Service;
}());
"use strict";
var Transform = (function () {
    function Transform() {
    }
    return Transform;
}());
// http://stackoverflow.com/a/4673436
if (!String.prototype.format) {
    String.prototype.format = function () {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined'
                ? args[number]
                : match;
        });
    };
}
// http://stackoverflow.com/a/1978419
if (!String.prototype.contains) {
    String.prototype.contains = function (it) {
        return this.indexOf(it) != -1;
    };
}
;
// Type definitions for jQuery 1.10.x / 2.0.x
// Project: http://jquery.com/
// Definitions by: Boris Yankov <https://github.com/borisyankov/>, Christian Hoffmeister <https://github.com/choffmeister>, Steve Fenton <https://github.com/Steve-Fenton>, Diullei Gomes <https://github.com/Diullei>, Tass Iliopoulos <https://github.com/tasoili>, Jason Swearingen <https://github.com/jasons-novaleaf>, Sean Hill <https://github.com/seanski>, Guus Goossens <https://github.com/Guuz>, Kelly Summerlin <https://github.com/ksummerlin>, Basarat Ali Syed <https://github.com/basarat>, Nicholas Wolverson <https://github.com/nwolverson>, Derek Cicerone <https://github.com/derekcicerone>, Andrew Gaspar <https://github.com/AndrewGaspar>, James Harrison Fisher <https://github.com/jameshfisher>, Seikichi Kondo <https://github.com/seikichi>, Benjamin Jackman <https://github.com/benjaminjackman>, Poul Sorensen <https://github.com/s093294>, Josh Strobl <https://github.com/JoshStrobl>, John Reilly <https://github.com/johnnyreilly/>, Dick van den Brink <https://github.com/DickvdBrink>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// Type definitions for Chartist v0.9.5
// Project: https://github.com/gionkunz/chartist-js
// Definitions by: Matt Gibbs <https://github.com/mtgibbs>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
